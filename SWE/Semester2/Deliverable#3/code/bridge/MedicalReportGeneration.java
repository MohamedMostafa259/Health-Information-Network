package org.example.api;

// Bridge Pattern Implementation for Medical Report Generation

// Implementer Interface
interface ReportFormatter {
    String formatHeader(String title);
    String formatContent(String content);
    String formatFooter(String author);
    String generateReport(String header, String content, String footer);
}

// Concrete Implementer 1 - PDF Format
class PDFFormatter implements ReportFormatter {
    @Override
    public String formatHeader(String title) {
        return "PDF Header: " + title;
    }

    @Override
    public String formatContent(String content) {
        return "PDF Content: " + content;
    }

    @Override
    public String formatFooter(String author) {
        return "PDF Footer: Generated by " + author;
    }

    @Override
    public String generateReport(String header, String content, String footer) {
        return "=== PDF Report ===\n" +
               header + "\n" +
               "------------------\n" +
               content + "\n" +
               "------------------\n" +
               footer + "\n" +
               "==================";
    }
}

// Concrete Implementer 2 - HTML Format
class HTMLFormatter implements ReportFormatter {
    @Override
    public String formatHeader(String title) {
        return "<h1>" + title + "</h1>";
    }

    @Override
    public String formatContent(String content) {
        return "<div class='content'>" + content + "</div>";
    }

    @Override
    public String formatFooter(String author) {
        return "<footer>Generated by " + author + "</footer>";
    }

    @Override
    public String generateReport(String header, String content, String footer) {
        return "<!DOCTYPE html>\n" +
               "<html>\n" +
               "<head><title>Medical Report</title></head>\n" +
               "<body>\n" +
               header + "\n" +
               content + "\n" +
               footer + "\n" +
               "</body>\n" +
               "</html>";
    }
}

// Abstraction
abstract class MedicalReport {
    protected ReportFormatter formatter;
    protected String title;
    protected String content;
    protected String author;

    public MedicalReport(ReportFormatter formatter, String title, String content, String author) {
        this.formatter = formatter;
        this.title = title;
        this.content = content;
        this.author = author;
    }

    public String generate() {
        String header = formatter.formatHeader(title);
        String formattedContent = formatter.formatContent(content);
        String footer = formatter.formatFooter(author);
        return formatter.generateReport(header, formattedContent, footer);
    }
}

// Refined Abstraction 1 - Lab Report
class LabReport extends MedicalReport {
    private String labResults;

    public LabReport(ReportFormatter formatter, String title, String content, String author, String labResults) {
        super(formatter, title, content, author);
        this.labResults = labResults;
    }

    @Override
    public String generate() {
        String originalContent = content + "\nLab Results: " + labResults;
        String header = formatter.formatHeader(title);
        String formattedContent = formatter.formatContent(originalContent);
        String footer = formatter.formatFooter(author);
        return formatter.generateReport(header, formattedContent, footer);
    }
}

// Refined Abstraction 2 - Diagnosis Report
class DiagnosisReport extends MedicalReport {
    private String diagnosis;
    private String recommendations;

    public DiagnosisReport(ReportFormatter formatter, String title, String content, String author, 
                          String diagnosis, String recommendations) {
        super(formatter, title, content, author);
        this.diagnosis = diagnosis;
        this.recommendations = recommendations;
    }

    @Override
    public String generate() {
        String originalContent = content + 
                               "\nDiagnosis: " + diagnosis + 
                               "\nRecommendations: " + recommendations;
        String header = formatter.formatHeader(title);
        String formattedContent = formatter.formatContent(originalContent);
        String footer = formatter.formatFooter(author);
        return formatter.generateReport(header, formattedContent, footer);
    }
}

// Main class to demonstrate the Bridge Pattern
public class Client {
    public static void main(String[] args) {
        // Create formatters
        ReportFormatter pdfFormatter = new PDFFormatter();
        ReportFormatter htmlFormatter = new HTMLFormatter();

        // Create reports with different formatters
        MedicalReport labReportPDF = new LabReport(
            pdfFormatter,
            "Blood Test Results",
            "Patient: John Doe\nDate: 2024-03-15",
            "Dr. Smith",
            "Hemoglobin: 14.5 g/dL\nWhite Blood Cells: 7,500/µL"
        );

        MedicalReport labReportHTML = new LabReport(
            htmlFormatter,
            "Blood Test Results",
            "Patient: Jane Smith\nDate: 2024-03-15",
            "Dr. Johnson",
            "Hemoglobin: 13.8 g/dL\nWhite Blood Cells: 6,800/µL"
        );

        MedicalReport diagnosisReportPDF = new DiagnosisReport(
            pdfFormatter,
            "Medical Diagnosis",
            "Patient: John Doe\nDate: 2024-03-15",
            "Dr. Smith",
            "Type 2 Diabetes",
            "1. Monitor blood sugar daily\n2. Exercise 30 minutes daily\n3. Follow diabetic diet"
        );

        MedicalReport diagnosisReportHTML = new DiagnosisReport(
            htmlFormatter,
            "Medical Diagnosis",
            "Patient: Jane Smith\nDate: 2024-03-15",
            "Dr. Johnson",
            "Hypertension",
            "1. Take prescribed medication\n2. Reduce salt intake\n3. Regular blood pressure monitoring"
        );

        // Generate and display reports
        System.out.println("=== PDF Lab Report ===");
        System.out.println(labReportPDF.generate());
        System.out.println("\n=== HTML Lab Report ===");
        System.out.println(labReportHTML.generate());
        System.out.println("\n=== PDF Diagnosis Report ===");
        System.out.println(diagnosisReportPDF.generate());
        System.out.println("\n=== HTML Diagnosis Report ===");
        System.out.println(diagnosisReportHTML.generate());
    }
}

